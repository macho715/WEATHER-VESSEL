import { NextResponse } from "next/server";

import { sendEmail, sendSlack } from "@/lib/server/notifier";
import { getLastReport, setLastReport } from "@/lib/server/report-state";
import { VESSEL_DATASET } from "@/lib/server/vessel-data";

export const dynamic = "force-dynamic";

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const slot = (searchParams.get("slot") as "am" | "pm") || "am";
  
  const lastReport = getLastReport();
  const now = new Date();
  
  // Check if report already sent for this slot today
  if (lastReport && lastReport.slot === slot) {
    const lastGenerated = new Date(lastReport.generatedAt);
    const isSameDay = lastGenerated.toDateString() === now.toDateString();
    
    if (isSameDay) {
      return NextResponse.json({
        ok: true,
        sent: lastReport.sent,
        slot,
        generatedAt: lastReport.generatedAt,
        message: "Report already sent for this slot today",
      });
    }
  }

  // Generate report content
  const tz = VESSEL_DATASET.timezone;
  const vessel = VESSEL_DATASET.vessel;
  const schedule = VESSEL_DATASET.schedule;
  const weatherWindows = VESSEL_DATASET.weatherWindows;

  const reportContent = `
🌊 Weather Vessel Logistics Report - ${slot.toUpperCase()}

📅 Generated: ${now.toLocaleString("ko-KR", { timeZone: tz })}
🚢 Vessel: ${vessel.name}
⚓ Port: ${vessel.port}
📊 Cargo: ${vessel.cargo}
🌊 Hs Limit: ${vessel.hsLimit}m

📋 Schedule:
${schedule.map((voyage: { from: string; to: string; etd: string; eta: string }) => 
  `• ${voyage.from} → ${voyage.to} (${voyage.etd} - ${voyage.eta})`
).join('\n')}

🌤️ Weather Windows:
${weatherWindows.map((window: { start: string; end: string; wave_m: number; wind_kt: number; summary: string }) => 
  `• ${window.start} - ${window.end}: Hs ${window.wave_m}m, Wind ${window.wind_kt}kt - ${window.summary}`
).join('\n')}

---
Generated by Weather Vessel Logistics Control Tower
  `.trim();

  // Send notifications
  const recipients = process.env.REPORT_RECIPIENTS?.split(',') || [];
  
  const [slackResult, emailResult] = await Promise.all([
    sendSlack(reportContent),
    recipients.length > 0 ? sendEmail(
      `Weather Vessel Report - ${slot.toUpperCase()}`,
      reportContent,
      recipients
    ) : Promise.resolve({ success: true })
  ]);

  const sent = {
    slack: slackResult.success,
    email: emailResult.success,
  };

  const report = {
    slot,
    generatedAt: now.toISOString(),
    sent,
  };

  setLastReport(report);

  return NextResponse.json({
    ok: slackResult.success || emailResult.success,
    sent,
    slot,
    generatedAt: report.generatedAt,
    sample: {
      content: reportContent.substring(0, 200) + "...",
      recipients: recipients.length,
    },
  });
}
